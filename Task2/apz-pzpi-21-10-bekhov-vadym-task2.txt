1 ОПИС АРХІТЕКТУРИ СИСТЕМИ

Система включає в себе кілька компонентів: серверну частину, сервер бази даних, сервер клієнтської частини, персональний комп’ютер користувача, розумний пристрій (нашийник) та мобільний пристрій.
Серверна частина системи відповідає за реалізацію всієї бізнес-логіки та взаємодію з базою даних. Всі дані про тварин зберігаються на сервері бази даних.
Сервер клієнтської частини зберігає веб-сторінки та забезпечує їх доступність для користувачів. Персональний комп’ютер користувача дозволяє власнику тварин взаємодіяти з системою через веб-інтерфейс.
Розумний нашийник забезпечує зчитування життєвих показників тварини, таких як частота серцевих скорочень, активність та інші параметри. Ці дані передаються до системи для аналізу.
Мобільний пристрій надає користувачам можливість взаємодіяти з системою у будь-який час та з будь-якого місця, отримуючи оперативну інформацію про стан своїх тварин.
Взаємодія між клієнтською та серверною частиною відбувається за допомогою Rest API, що забезпечує надійну та ефективну передачу даних. Інші компоненти системи взаємодіють через протокол HTTPS, що гарантує безпечний обмін даними.

2 ПОБУДОВА ДІАГРАМИ РОЗГОРТАННЯ

Для розробки діаграми розгортання були виділені такі пристрої:
-	Сервер, на якому реалізовано проект та уся бізнес логіка. Тут також реалізована взаємодія з базою даних.
-	Сервер бази даних PostgreSQL для зберігання даних користувачів.
-	Сервер клієнтської частини, яка зберігає веб-сторінки.
-	Персональний комп’ютер користувача, за допомогою якого він може взаємодіяти з системою
-	Розумний пристрій, який надає додаткову функціональність для системи, а саме зчитування даних про здоров 'я тварин.
-	Мобільний пристрій, який надає можливість взаємодіяти з системою.
Взаємодія клієнтської та серверної частини відбувається за допомоги Rest специфікації. Інші компоненти системи взаємодіють через протокол HTTPS.

3 ОПИС АРХІТЕКТУРИ СЕРВЕРНОЇ ЧАСТИНИ

За архітектуру для проєкту було взято MVC архітектуру. Її суть полягає в тому, що ми розділяємо проєкт на окремі компоненти. В нашому випадку ми виділили такі компоненти:
–	Models – моделі, класи, які описують сутності в базі даних.
–	Controllers – контролери, які обробляють дані користувачів і містять всю бізнес-логіку застосунку.
–	Routes – маршрути, які визначають, які дії виконуються при запиті до сервера.
–	Config – файли конфігурації.
–	Middleware – файли для забезпечення безпеки.	Для взаємодії серверу з іншими програмними шарами використовується Rest API. 

4 ПОБУДОВА ДІАГРАМИ ПРЕЦЕДЕНТІВ

Для розробки діаграми прецедентів у системі були виділені такі актори:
-	Користувач: людина, яка користується системою розумних нашийників.
-	Адміністратор: користувач, який відповідає за виконання замовлень користувачами.
-	Ветеринар: користувач, який може зареєструвати свою клініку в системі, та користуватися послугами записів в клініку.

5 ПОБУДОВА ER-ДІАГРАМИ

Для розробки ER моделі даних були виділені такі сутності в системі:
-	Користувач: містить інформацію про всіх користувачів системи.
-	Тварини: містить інформацію про всіх тварин системи.
-	Ветеринарні клініки: містить інформацію про всі зареєстровані клініки в системі.
-	Замовлення: замовлення, які здійснюють користувачі.
-	Запис в клініку: записи, які здійснюють користувачі.
-	Нашийник: інформація про зареєстрований нашийник в системі.
-	Показники тварин: життєві показники тварин, які відстежуються нашийником.

6 СПЕЦИФІКАЦІЯ REST

Для взаємодії серверу з іншими програмними шарами використовується Rest API. Опис специфікації Rest API наведено в додатку А.

7 ПОБУДОВА ДІАГРАМИ КОМПОНЕНТІВ

Для побудови діаграми компонентів виділимо такі компоненти:

-	Сервер, на якому реалізовано проект та уся бізнес логіка. Тут також реалізована взаємодія з базою даних.
-	Сервер бази даних PostgreSQL для зберігання даних користувачів.
-	Сервер клієнтської частини, яка зберігає веб-сторінки.
-	Персональний комп’ютер користувача, за допомогою якого він може взаємодіяти з системою
-	Розумний пристрій, який надає додаткову функціональність для системи, а саме зчитування даних про здоров 'я тварин.
-	Мобільний пристрій, який надає можливість взаємодіяти з системою.

ВИСНОВКИ

Висновки: в результаті виконання лабораторної роботи була реалізована серверна частина програмної системи, з дотриманням вимог щодо захисту даних, реалізована відповідна бізнес логіка проєкту, описана специфікація Rest API. Також були створені UML діаграми розгортання, прецедентів, станів, а також ER-модель даних, які описують усі складові серверної частини проєкту. 

ДОДАТОК А
Контролер: «Тварини»
Метод: POST
URL: /add
Опис: Додати тварину
Контролер: «Тварини»
Метод: GET
URL: /all
Опис: Отримати список тварин
Контролер: «Записи до клініки»
Метод: GET
URL: /all
Опис: Отримати усі записи певної клініки
Контролер: «Записи до клініки»
Метод: POST
URL: /new
Опис: Створити новий запис в клініку
Контролер: «Користувач»
Метод: POST
URL: /login
Опис: Авторизація користувача
Контролер: «Користувач»
Метод: POST
URL: /registration
Опис: Реєстрація користувача
Контролер: «Замовлення»
Метод: POST
URL: /add
Опис: Створення нового замовлення користувачем
Контролер: «Замовлення»
Метод: GET
URL: /all
Опис: Виведення списку всіх замовлень
Контролер: «Ветеринарні клініки»
Метод: POST
URL: /add
Опис: Реєстрація нової клініки
Контролер: «Ветеринарні клініки»
Метод: GET
URL: /view
Опис: Відображення інформації про клініку певного ветеринара
Контролер: «Ветеринарні клініки»
Метод: GET
URL: /all
Опис: Відображення всіх клінік
